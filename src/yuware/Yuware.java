/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package yuware;

import com.alee.laf.WebLookAndFeel;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.channels.Channels;
import java.nio.channels.ReadableByteChannel;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Somesh Thakur
 */
public class Yuware extends javax.swing.JFrame {

    /**
     * Creates new form Yuware
     */
    public Yuware() {

        initComponents();
        setIcon();
        try {
            startADB();
        } catch (IOException | InterruptedException ex) {
        }
        try {
            BufferedReader brr = new BufferedReader(new FileReader(("C:\\Program Files\\Yuware™\\dncu.txt")));
            if ("0".equals(brr.readLine())) {
                checkUpdate();
            }
        } catch (FileNotFoundException ex) {
        } catch (IOException ex) {
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Devices = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        DSelected = new javax.swing.JTextField();
        Byureka = new javax.swing.JToggleButton();
        Byuphoria = new javax.swing.JToggleButton();
        Byunique = new javax.swing.JToggleButton();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        adbpath = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        Byurekap = new javax.swing.JToggleButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        adblog = new javax.swing.JTextArea();
        jButton5 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        fblog = new javax.swing.JTextArea();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButton18 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        DCTab = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jButton20 = new javax.swing.JButton();
        jButton21 = new javax.swing.JButton();
        jButton22 = new javax.swing.JButton();
        jButton26 = new javax.swing.JButton();
        jButton27 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jButton28 = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jButton33 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jButton24 = new javax.swing.JButton();
        Brecorder = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jButton30 = new javax.swing.JButton();
        jButton29 = new javax.swing.JButton();
        jButton32 = new javax.swing.JButton();
        jButton34 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jButton25 = new javax.swing.JButton();
        jButton37 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jButton35 = new javax.swing.JButton();
        jButton36 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        Dstatus = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        Byutopia = new javax.swing.JToggleButton();
        jLabel14 = new javax.swing.JLabel();
        Bforced = new javax.swing.JToggleButton();
        jLabel15 = new javax.swing.JLabel();
        jButton38 = new javax.swing.JButton();
        jButton39 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yuware/title.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Select your device. Current working device:");

        DSelected.setEditable(false);

        Devices.add(Byureka);
        Byureka.setText("Yureka ");
        Byureka.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ByurekaActionPerformed(evt);
            }
        });

        Devices.add(Byuphoria);
        Byuphoria.setText("Yuphoria");
        Byuphoria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ByuphoriaActionPerformed(evt);
            }
        });

        Devices.add(Byunique);
        Byunique.setText("Yunique");
        Byunique.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ByuniqueActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Reboot options");

        jButton1.setText("Reboot");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Reboot to recovery");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Reboot to bootloader");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("ADB options");

        jButton4.setText("ADB sideload");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton6.setText("Ok");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        adbpath.setText("C:\\Program Files\\Yuware™");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Adb path");

        Devices.add(Byurekap);
        Byurekap.setText("Yureka+");
        Byurekap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ByurekapActionPerformed(evt);
            }
        });

        jButton7.setText("ADB devices");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("Clear");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        adblog.setEditable(false);
        adblog.setColumns(20);
        adblog.setRows(5);
        jScrollPane1.setViewportView(adblog);

        jButton5.setText("Fastboot Devices");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton9.setText("Clear");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        fblog.setColumns(20);
        fblog.setRows(5);
        jScrollPane2.setViewportView(fblog);

        jButton10.setText("Install App");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        jButton11.setText("Install Multiple Apps");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("Fastboot Options");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("ADB Log");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Fastboot Log");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Install Drivers");

        jButton18.setText("Drivers");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jButton19.setText("Report Bug");
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton19ActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Device Controller");

        jButton20.setText("Home");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton20ActionPerformed(evt);
            }
        });

        jButton21.setText("Back");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton21ActionPerformed(evt);
            }
        });

        jButton22.setText("Call");
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton22ActionPerformed(evt);
            }
        });

        jButton26.setText("Volume up");
        jButton26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton26ActionPerformed(evt);
            }
        });

        jButton27.setText("Volume Down");
        jButton27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton27ActionPerformed(evt);
            }
        });

        jButton23.setText("Lock Screen");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton23ActionPerformed(evt);
            }
        });

        jButton28.setText("Recent Apps");
        jButton28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton28ActionPerformed(evt);
            }
        });

        jLabel11.setText("=>");

        jButton33.setText("Clear");
        jButton33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton33ActionPerformed(evt);
            }
        });

        jButton31.setText("Input Text");
        jButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton31ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton20)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton21)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton23))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton27)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton31))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jButton28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton33)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton20)
                    .addComponent(jButton21)
                    .addComponent(jButton22)
                    .addComponent(jButton23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton26)
                    .addComponent(jButton27)
                    .addComponent(jButton31))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton28)
                    .addComponent(jLabel11)
                    .addComponent(jButton33))
                .addContainerGap())
        );

        DCTab.addTab("Mostly Used", jPanel3);

        jButton24.setText("Screenshot");
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton24ActionPerformed(evt);
            }
        });

        Brecorder.setText("Record Screeen");
        Brecorder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BrecorderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(90, 90, 90)
                        .addComponent(Brecorder))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(jButton24)))
                .addContainerGap(94, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                .addComponent(jButton24)
                .addGap(18, 18, 18)
                .addComponent(Brecorder)
                .addGap(24, 24, 24))
        );

        DCTab.addTab("Screen", jPanel5);

        jButton30.setText("Swipe Down");
        jButton30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton30ActionPerformed(evt);
            }
        });

        jButton29.setText("Swipe UP");
        jButton29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton29ActionPerformed(evt);
            }
        });

        jButton32.setText("Swipe Left");
        jButton32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton32ActionPerformed(evt);
            }
        });

        jButton34.setText("Swipe Right");
        jButton34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton34ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jButton29)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton32))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jButton30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 93, Short.MAX_VALUE)
                        .addComponent(jButton34)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton29)
                    .addComponent(jButton32))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton30)
                    .addComponent(jButton34))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        DCTab.addTab("Swipe", jPanel6);

        jButton25.setText("Power Off");
        jButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton25ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton25)
                .addContainerGap(202, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton25)
                .addContainerGap(74, Short.MAX_VALUE))
        );

        DCTab.addTab("Power Opt", jPanel4);

        jButton37.setText("Push File");
        jButton37.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton37ActionPerformed(evt);
            }
        });

        jButton12.setText("Unlock bootloader");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });

        jButton13.setText("Lock bootloader");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });

        jButton16.setText("Device INFO");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        jButton17.setText("Reboot to System");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton13))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton17)))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton12)
                    .addComponent(jButton13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton16)
                    .addComponent(jButton17))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Bootloader", jPanel1);

        jButton14.setText("Flash recovery.img");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });

        jButton15.setText("Boot recovery");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton14)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton15)
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton14)
                    .addComponent(jButton15))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Recovery", jPanel2);

        jButton35.setText("Flash Fastboot images");
        jButton35.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton35ActionPerformed(evt);
            }
        });

        jButton36.setText("Format All Partitions");
        jButton36.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton36ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton35)
                    .addComponent(jButton36))
                .addContainerGap(122, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton35)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jButton36)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Flashing Partitions", jPanel7);

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        Dstatus.setEditable(false);
        Dstatus.setColumns(20);
        Dstatus.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        Dstatus.setRows(5);
        Dstatus.setToolTipText("Device Status");
        jScrollPane3.setViewportView(Dstatus);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("Follow me on Google+");
        jLabel12.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel12MouseReleased(evt);
            }
        });

        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yuware/refresh.png"))); // NOI18N
        jLabel13.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel13MouseReleased(evt);
            }
        });

        Devices.add(Byutopia);
        Byutopia.setText("Yutopia");
        Byutopia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ByutopiaActionPerformed(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(0, 153, 255));
        jLabel14.setText("ForcedMode");

        Bforced.setText("forcedmode");

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel15.setText("Bakup And Restore");

        jButton38.setText("Backup All Data");
        jButton38.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton38ActionPerformed(evt);
            }
        });

        jButton39.setText("Restore All Data");
        jButton39.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton39ActionPerformed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(51, 153, 255));
        jLabel16.setText("Click Here to know more.");
        jLabel16.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel16.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jLabel16MouseReleased(evt);
            }
        });
        jLabel16.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jLabel16FocusGained(evt);
            }
        });

        jMenu1.setText("Thread");

        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yuware/xdacon.png"))); // NOI18N
        jMenuItem2.setText("XDA Thread");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yuware/yucon.png"))); // NOI18N
        jMenuItem3.setText("YUOfficialForum");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Help");

        jMenuItem4.setText("Guide");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Features");

        jMenuItem6.setText("Enable DC");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem6);

        jMenuItem5.setText("Disable DC");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem5);

        jMenuItem8.setText("Enable Forced Mode");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem8);

        jMenuItem9.setText("Disable Forced Mode");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem9);

        jMenuBar1.add(jMenu4);

        jMenu3.setText("About");

        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yuware/yucon.png"))); // NOI18N
        jMenuItem1.setText("Yuware");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem1);

        jMenuItem7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yuware/github.png"))); // NOI18N
        jMenuItem7.setText("Github");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem7);

        jMenuItem10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yuware/update.png"))); // NOI18N
        jMenuItem10.setText("Check for Update");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem10);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(DSelected, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(Byureka)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Byurekap)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel13))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(Byuphoria)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Byunique)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(Byutopia))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3))
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton10)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton11)
                                .addGap(3, 3, 3)
                                .addComponent(jButton37))
                            .addComponent(jLabel6)
                            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(jButton7)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton8))
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel8)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                                                .addComponent(jButton5)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jButton9))
                                            .addComponent(jScrollPane2)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel5)
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                    .addComponent(adbpath, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(jButton6)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel9)
                                                    .addComponent(jButton18))
                                                .addGap(67, 67, 67)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabel15)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jButton38)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(jButton39))))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel14)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addGap(10, 10, 10)
                                                            .addComponent(jLabel16)))
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(Bforced))
                                                .addComponent(DCTab, javax.swing.GroupLayout.PREFERRED_SIZE, 298, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(55, 55, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton19))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton5)
                            .addComponent(jButton9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton7)
                            .addComponent(jButton8)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton19)
                            .addComponent(jLabel12)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(DSelected, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                                    .addComponent(jLabel13))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Byureka)
                                    .addComponent(Byuphoria)
                                    .addComponent(Byunique)
                                    .addComponent(Byurekap)
                                    .addComponent(Byutopia))
                                .addGap(15, 15, 15)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel15))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton1)
                                    .addComponent(jButton2)
                                    .addComponent(jButton3)
                                    .addComponent(jButton18)
                                    .addComponent(jButton38)
                                    .addComponent(jButton39))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel10)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(adbpath, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton6))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButton4)
                                    .addComponent(jButton10)
                                    .addComponent(jButton11)
                                    .addComponent(jButton37))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTabbedPane1)
                                .addGap(27, 27, 27))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(DCTab, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Bforced)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel16)
                                .addGap(6, 6, 6))))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        final ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(Yuware.class.getResource("About.png")));
        JOptionPane.showMessageDialog(null, " Yuware is free software for YU devices \n"
                + " It is designed for User Friendly GUI, Easy to use and Premium look purpose. \n"
                + " All Copyrights© are reserved by Somesh Thakur. \n (The Dev behind this software)"
                + "     Contact : Someshthakur33@gmail.com \n"
                + "  Version :- 5.0 ", "About", JOptionPane.INFORMATION_MESSAGE, icon);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        try {
            Desktop.getDesktop().browse(new URI("http://forum.xda-developers.com/yureka/development/windows-yuware2013266073-t3193757"));
        } catch (IOException | URISyntaxException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        try {
            Desktop.getDesktop().browse(new URI("http://forums.yuplaygod.com/threads/windows-yuware%E2%84%A2-gui.21967"));
        } catch (IOException | URISyntaxException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void ByurekaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ByurekaActionPerformed
        Dstatus.setText("");
        DSelected.setText("Yureka selected!");
        Byureka.setSelected(true);
        try {
            DStatus();
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ByurekaActionPerformed

    private void ByuphoriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ByuphoriaActionPerformed
        Dstatus.setText("");
        DSelected.setText("Yuphoria selected!");
        Byuphoria.setSelected(true);
        try {
            DStatus();
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ByuphoriaActionPerformed

    private void ByuniqueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ByuniqueActionPerformed
        Dstatus.setText("");
        DSelected.setText("Yunique selected!");
        Byunique.setSelected(true);
        try {
            DStatus();
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ByuniqueActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
            reboot();
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        JOptionPane.showMessageDialog(null, "Custom adb selected!", "", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            reboottorecovery();
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            rebootbootloader();
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        try {
            sideload();
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void ByurekapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ByurekapActionPerformed
        Dstatus.setText("");
        DSelected.setText("Yureka+ selected!");
        Byurekap.setSelected(true);
        try {
            DStatus();
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ByurekapActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        try {
            adb();
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        clear();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        if (Devices.getSelection() == null) {
            JOptionPane.showMessageDialog(null, "Please select device first!", "Oops!", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                fastboot();
            } catch (IOException ex) {
                Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        clear2();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        try {
            installApp();
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        try {
            installMulApp();
        } catch (IOException | InterruptedException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        if (Devices.getSelection() == null) {
            JOptionPane.showMessageDialog(null, "Please select device first!", "Oops!", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                unlockBL();
            } catch (IOException | InterruptedException ex) {
                Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        if (Devices.getSelection() == null) {
            JOptionPane.showMessageDialog(null, "Please select device first!", "Oops!", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                lockBL();
            } catch (IOException ex) {
                Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        if (Devices.getSelection() == null) {
            JOptionPane.showMessageDialog(null, "Please select device first!", "Oops!", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                flashrcvry();
            } catch (IOException | InterruptedException ex) {
                Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        if (Devices.getSelection() == null) {
            JOptionPane.showMessageDialog(null, "Please select device first!", "Oops!", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                bootrcvry();
            } catch (IOException ex) {
                Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_jButton15ActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        if (Devices.getSelection() == null) {
            JOptionPane.showMessageDialog(null, "Please select device first!", "Oops!", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                deviceInfo();
            } catch (IOException | InterruptedException ex) {
                Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        if (Devices.getSelection() == null) {
            JOptionPane.showMessageDialog(null, "Please select device first!", "Oops!", JOptionPane.INFORMATION_MESSAGE);
        } else {
            try {
                rebootFbSys();
            } catch (IOException ex) {
                Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        drivers();
    }//GEN-LAST:event_jButton18ActionPerformed

    private void jButton20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton20ActionPerformed
        String path = adbpath.getText();
        try {
            Process home = Runtime.getRuntime().exec(path + "\\adb shell input keyevent 3");
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton20ActionPerformed

    private void jButton23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton23ActionPerformed
        String path = adbpath.getText();
        try {
            Process lock = Runtime.getRuntime().exec(path + "\\adb shell input keyevent 6");
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton23ActionPerformed

    private void jButton21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton21ActionPerformed
        String path = adbpath.getText();
        try {
            Process back = Runtime.getRuntime().exec(path + "\\adb shell input keyevent 4");
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton21ActionPerformed

    private void jButton22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton22ActionPerformed
        String path = adbpath.getText();
        try {
            Process call = Runtime.getRuntime().exec(path + "\\adb shell input keyevent 5");
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton22ActionPerformed

    private void jButton24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton24ActionPerformed
        String path = adbpath.getText();
        Process process;
        try {
            process = Runtime.getRuntime().exec("cmd /c ss.bat", null, new File("C:/Program Files/Yuware™"));
            process.waitFor();
            JOptionPane.showMessageDialog(null, "Screenshot has been saved on your desktop!", "Sucess!", JOptionPane.INFORMATION_MESSAGE);
        } catch (InterruptedException | IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton24ActionPerformed

    private void jButton25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton25ActionPerformed
        String path = adbpath.getText();
        try {
            Process poweroff = Runtime.getRuntime().exec(path + "\\adb shell reboot -p");
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton25ActionPerformed

    private void jButton26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton26ActionPerformed
        String path = adbpath.getText();
        try {
            Process volumeup = Runtime.getRuntime().exec(path + "\\adb shell input keyevent 24");
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton26ActionPerformed

    private void jButton27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton27ActionPerformed
        String path = adbpath.getText();
        try {
            Process volumedown = Runtime.getRuntime().exec(path + "\\adb shell input keyevent 25");
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton27ActionPerformed

    private void jButton28ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton28ActionPerformed
        String path = adbpath.getText();
        try {
            Process recent = Runtime.getRuntime().exec(path + "\\adb shell input keyevent KEYCODE_APP_SWITCH");
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton28ActionPerformed

    private void jButton29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton29ActionPerformed
        String path = adbpath.getText();
        try {
            Process recent = Runtime.getRuntime().exec(path + "\\adb shell input swipe 360 1100 360 100");
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton29ActionPerformed

    private void jButton30ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton30ActionPerformed
        String path = adbpath.getText();
        try {
            Process recent = Runtime.getRuntime().exec(path + "\\adb shell input swipe 360 100 360 1100");
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton30ActionPerformed

    private void jButton31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton31ActionPerformed
        String path = adbpath.getText();
        String msg = JOptionPane.showInputDialog(null, "");
        if (!(msg == null)) {
            try {
                String value = msg.replaceAll("\\s", "%s");
                Process recent = Runtime.getRuntime().exec(path + "\\adb shell input text \"" + value + "\"");
            } catch (IOException ex) {
            }
        }
    }//GEN-LAST:event_jButton31ActionPerformed

    private void BrecorderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BrecorderActionPerformed
        JOptionPane.showMessageDialog(null, " A command prompt will appear now! Close it to stop recording.\n Video will be saved in your internal storage.\n With the name of \"CURRENT-YEAR-DATE-MONTH-TIME-YuwareScreenRecorder.mp4", "", JOptionPane.INFORMATION_MESSAGE);
        try {
            Process process = Runtime.getRuntime().exec("cmd /c recorder.bat", null, new File("C:/Program Files/Yuware™"));
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_BrecorderActionPerformed

    private void jButton33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton33ActionPerformed
        String path = adbpath.getText();
        if (!(Devices.getSelection() == null)) {
            try {
                if (Byureka.isSelected() || Byuphoria.isSelected() || Byunique.isSelected()) {
                    Process clear = Runtime.getRuntime().exec(path + "\\adb shell input tap 660 86");
                } else if (Byurekap.isSelected()) {
                    Process clear = Runtime.getRuntime().exec(path + "\\adb shell input tap 1320 172");
                } else if (Byutopia.isSelected()) {
                    Process clear = Runtime.getRuntime().exec(path + "\\adb shell input tap 2640 344");
                }
            } catch (IOException ex) {
                Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Select Your Device first", "Oops", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jButton33ActionPerformed

    private void jButton32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton32ActionPerformed
        String path = adbpath.getText();
        try {
            Process recent = Runtime.getRuntime().exec(path + "\\adb shell input swipe 650 650 100 650");
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton32ActionPerformed

    private void jButton34ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton34ActionPerformed
        String path = adbpath.getText();
        try {
            Process recent = Runtime.getRuntime().exec(path + "\\adb shell input swipe 100 650 650 650");
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton34ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        new Thread() {
            @Override
            public void run() {
                try {
                    adblog.append("\n Opening Guide.docx");
                    Desktop.getDesktop().edit(new File("C:/Program Files/Yuware™/Guide.docx"));
                    clear();
                } catch (IOException ex) {
                    Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.start();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jButton35ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton35ActionPerformed
        if (Devices.getSelection() == null) {
            JOptionPane.showMessageDialog(null, "Please select device first!", "Oops!", JOptionPane.INFORMATION_MESSAGE);
        } else {
            flashAll();
        }
    }//GEN-LAST:event_jButton35ActionPerformed

    private void jButton36ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton36ActionPerformed
        if (Devices.getSelection() == null) {
            JOptionPane.showMessageDialog(null, "Please select device first!", "Oops!", JOptionPane.INFORMATION_MESSAGE);
        } else {
            formatAll();
        }
    }//GEN-LAST:event_jButton36ActionPerformed

    private void jButton37ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton37ActionPerformed
        new Thread() {
            @Override
            public void run() {
                push();
            }
        }.start();
    }//GEN-LAST:event_jButton37ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        DCTab.setVisible(false);
        jLabel10.setVisible(false);
        jMenuItem5.setVisible(false);
        jMenuItem6.setVisible(true);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        DCTab.setVisible(true);
        jLabel10.setVisible(true);
        jMenuItem5.setVisible(true);
        jMenuItem6.setVisible(false);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jButton19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton19ActionPerformed
        try {
            Desktop.getDesktop().browse(new URI("http://goo.gl/forms/aXSZa5k8Ip"));
        } catch (URISyntaxException | IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton19ActionPerformed

    private void jLabel12MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseReleased
        try {
            Desktop.getDesktop().browse(new URI("https://plus.google.com/u/0/106205687174772057721/posts"));
        } catch (URISyntaxException | IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLabel12MouseReleased

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        try {
            Desktop.getDesktop().browse(new URI("http://someshthakur.github.io/Yuware/"));
        } catch (URISyntaxException | IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jLabel13MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel13MouseReleased
        try {
            DStatus();
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jLabel13MouseReleased

    private void ByutopiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ByutopiaActionPerformed
        Dstatus.setText("");
        DSelected.setText("Yutopia selected!");
        Byutopia.setSelected(true);
        try {
            DStatus();
        } catch (IOException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_ByutopiaActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed
        Bforced.setSelected(true);
        jLabel14.setVisible(true);
        jLabel14.setText("Forced Mode is Enabled!");
        jLabel16.setVisible(true);
        jMenuItem8.setVisible(false);
        jMenuItem9.setVisible(true);
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        Bforced.setSelected(false);
        jLabel14.setVisible(false);
        jMenuItem9.setVisible(false);
        jLabel16.setVisible(false);
        jMenuItem8.setVisible(true);
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jButton38ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton38ActionPerformed
        backup();
    }//GEN-LAST:event_jButton38ActionPerformed

    private void jButton39ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton39ActionPerformed
        restore();
    }//GEN-LAST:event_jButton39ActionPerformed

    private void jLabel16FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jLabel16FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel16FocusGained

    private void jLabel16MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel16MouseReleased
        JOptionPane.showMessageDialog(null, " Forced Mode is dummy simulation of Device"
                + "\n It Makes the state of Device as Connected"
                + "\n It is useful when your device is being not listed but can take coomands"
                + "\n Try to use it only if you have Device connected and Not able to detect.", "Information", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jLabel16MouseReleased

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        checkUpdate();
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        int y = JOptionPane.showConfirmDialog(null, "Do you really want to exit ? ", "Warning!", JOptionPane.YES_NO_OPTION);
        if (y == JOptionPane.YES_OPTION) {
            try {
                Runtime.getRuntime().exec("taskkill /F /IM adb.exe");
            } catch (IOException ex) {
            }
            System.exit(0);
        }
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Yuware.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                WebLookAndFeel.install(true);
                WebLookAndFeel.setDecorateFrames(true);
                WebLookAndFeel.setDecorateAllWindows(true);
                new Yuware().setVisible(true);
                BufferedReader br = null;
                try {
                    br = new BufferedReader(new FileReader(("C:\\Program Files\\Yuware™\\dsmsg.txt")));
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    while ("0".equals(br.readLine())) {
                        JCheckBox cb = new JCheckBox("Do not show this message again.");
                        String msg = " Make sure your device is connected with USB cable to PC and USB Debugging enabled \n"
                                + " Install proper drivers if the device doesn't show in ADB devices.\n";
                        Object[] msgContent = {msg, cb};
                        JOptionPane.showMessageDialog(null, msgContent, "Warning!!", JOptionPane.INFORMATION_MESSAGE);
                        if (cb.isSelected()) {
                            try {
                                Process exec = Runtime.getRuntime().exec("cmd /c dsmsgY.bat", null, new File("C:/Program Files/Yuware™"));
                            } catch (IOException ex) {
                                Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                } catch (IOException ex) {
                    Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton Bforced;
    private javax.swing.JButton Brecorder;
    private javax.swing.JToggleButton Byunique;
    private javax.swing.JToggleButton Byuphoria;
    private javax.swing.JToggleButton Byureka;
    private javax.swing.JToggleButton Byurekap;
    private javax.swing.JToggleButton Byutopia;
    private javax.swing.JTabbedPane DCTab;
    private javax.swing.JTextField DSelected;
    private javax.swing.ButtonGroup Devices;
    private javax.swing.JTextArea Dstatus;
    private javax.swing.JTextArea adblog;
    private javax.swing.JTextField adbpath;
    private javax.swing.JTextArea fblog;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton28;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton30;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton jButton32;
    private javax.swing.JButton jButton33;
    private javax.swing.JButton jButton34;
    private javax.swing.JButton jButton35;
    private javax.swing.JButton jButton36;
    private javax.swing.JButton jButton37;
    private javax.swing.JButton jButton38;
    private javax.swing.JButton jButton39;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    private void setIcon() {
        setTitle("Yuware™");
        setIconImage(Toolkit.getDefaultToolkit().getImage(Yuware.class.getResource("icon.png")));
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
        adblog.setLineWrap(true);
        adblog.setToolTipText("Connected Devices");
        fblog.setLineWrap(true);
        jMenuItem6.setVisible(false);
        jMenuItem9.setVisible(false);
        Bforced.setVisible(false);
        jLabel14.setVisible(false);
        jLabel16.setVisible(false);
    }

    private void reboot() throws IOException {
        new Thread() {
            @Override
            public void run() {
                try {
                    DStatus();
                    Thread.sleep(300);
                    String tmp = Dstatus.getText();
                    if (null != tmp) {
                        switch (tmp) {
                            case "Connected!":
                            case "Recovery!":
                                String path = adbpath.getText();
                                Process re = Runtime.getRuntime().exec(path + "\\adb reboot");
                                re.waitFor();
                                final ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(Yuware.class.getResource("done.png")));
                                JOptionPane.showMessageDialog(null, "Rebooted Sucessfully!", "Sucess", JOptionPane.INFORMATION_MESSAGE, icon);
                                break;
                            case "Fastboot!":
                                JOptionPane.showMessageDialog(null, "This Option will work if your device is connected on Switch ON mode\nFor rebooting from fastboot mode click on\"Reboot to System\" in Fastboot option", "", JOptionPane.INFORMATION_MESSAGE);
                                break;
                            default:
                                JOptionPane.showMessageDialog(null, "It looks your device is diconnected!\nPlease connect again to perform this action\nMake sure you install drivers properly!", "Oops! Warnings", JOptionPane.INFORMATION_MESSAGE);
                                break;
                        }
                    }
                } catch (IOException | InterruptedException ex) {
                    Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.start();
    }

    private void reboottorecovery() throws IOException {
        new Thread() {
            @Override
            public void run() {
                try {
                    DStatus();
                    Thread.sleep(300);
                    String tmp = Dstatus.getText();
                    if (null != tmp) {
                        switch (tmp) {
                            case "Connected!":
                                String path = adbpath.getText();
                                Process re = Runtime.getRuntime().exec(path + "\\adb reboot recovery");
                                re.waitFor();
                                final ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(Yuware.class.getResource("done.png")));
                                JOptionPane.showMessageDialog(null, "Rebooted to recovery Sucessfully!", "Sucess", JOptionPane.INFORMATION_MESSAGE, icon);
                                break;
                            case "Recovery!":
                                JOptionPane.showMessageDialog(null, "Your Device is already in recovery mode!", "Oops!", JOptionPane.INFORMATION_MESSAGE);
                                break;
                            case "Fastboot!":
                                JOptionPane.showMessageDialog(null, "This Option will work if your device is connected on Switch ON mode\nRebooting to recovery directly from fastboot is not possible!\nFor rebooting to system from fastboot mode click on\"Reboot to System\" in Fastboot option", "", JOptionPane.INFORMATION_MESSAGE);
                                break;
                            default:
                                JOptionPane.showMessageDialog(null, "It looks your device is diconnected!\nPlease connect again to perform this action\nMake sure you install drivers properly!", "Oops! Warnings", JOptionPane.INFORMATION_MESSAGE);
                                break;
                        }
                    }
                } catch (IOException | InterruptedException ex) {
                    Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.start();
    }

    private void rebootbootloader() throws IOException {
        new Thread() {
            @Override
            public void run() {
                try {
                    DStatus();
                    Thread.sleep(300);
                    String tmp = Dstatus.getText();
                    if (null != tmp) {
                        switch (tmp) {
                            case "Connected!":
                            case "Recovery!":
                                String path = adbpath.getText();
                                Process re = Runtime.getRuntime().exec(path + "\\adb reboot-bootloader");
                                re.waitFor();
                                final ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(Yuware.class.getResource("done.png")));
                                JOptionPane.showMessageDialog(null, "Rebooted Sucessfully!", "Sucess", JOptionPane.INFORMATION_MESSAGE, icon);
                                break;
                            case "Fastboot!":
                                JOptionPane.showMessageDialog(null, "Your device is already in Fastboot mode!", "", JOptionPane.INFORMATION_MESSAGE);
                                break;
                            default:
                                JOptionPane.showMessageDialog(null, "It looks your device is diconnected!\nPlease connect again to perform this action\nMake sure you install drivers properly!", "Oops! Warnings", JOptionPane.INFORMATION_MESSAGE);
                                break;
                        }
                    }
                } catch (IOException | InterruptedException ex) {
                    Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.start();
    }

    private void sideload() throws IOException {
        final String path = adbpath.getText();

        int c = JOptionPane.showConfirmDialog(null, " Make sure your device is boot into recovery mode and set in sideload mode\n"
                + " Else boot into recovery by clicking on \"Reboot to recovery\" option"
                + "\n In recovery goto Advance > Sideload", "Warning!", JOptionPane.YES_NO_OPTION);
        if (c == JOptionPane.YES_OPTION) {
            FileFilter filter = new FileNameExtensionFilter("Zip files", "zip");
            JFileChooser chooser = new JFileChooser();
            chooser.setFileFilter(filter);
            chooser.addChoosableFileFilter(filter);
            int result = chooser.showOpenDialog(this);
            if (result == JFileChooser.APPROVE_OPTION) {
                File choosen = chooser.getSelectedFile();
                final String pathoffile = choosen.getAbsolutePath();
                adblog.setText("Sideloading " + pathoffile);
                new Thread() {
                    @Override
                    public void run() {
                        try {
                            final Process as = Runtime.getRuntime().exec(path + "\\adb sideload " + pathoffile);
                            String line;
                            BufferedReader reader = new BufferedReader(new InputStreamReader(as.getInputStream()));
                            while ((line = reader.readLine()) != null) {
                                clear();
                                adblog.append("\n" + line);
                            }
                        } catch (IOException ex) {
                            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }.start();
                final ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(Yuware.class.getResource("done.png")));
                JOptionPane.showMessageDialog(null, " Sideloaded Sucessfully!\n Check ADB Log box for more details", "Sucess", JOptionPane.INFORMATION_MESSAGE, icon);
            }
        }
    }

    private void adb() throws IOException {
        clear();
        String line;
        String path = adbpath.getText();
        Process process = Runtime.getRuntime().exec(path + "\\adb devices");
        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        while ((line = reader.readLine()) != null) {
            adblog.append("\n" + line);
            process.destroy();
        }
    }

    private void clear() {
        adblog.setText("");
    }

    private void startADB() throws IOException, InterruptedException {
        new Thread() {
            @Override
            public void run() {
                try {
                    Process p = Runtime.getRuntime().exec("cmd /c ADB-starter.bat", null, new File("C:/Program Files/Yuware™"));
                    p.waitFor();
                    p.destroy();
                } catch (IOException | InterruptedException ex) {
                }
            }
        }.start();
    }

    private void fastboot() throws IOException {
        new Thread() {
            @Override
            public void run() {
                if (Byureka.isSelected() || Byurekap.isSelected()) {
                    try {
                        clear2();
                        String line;
                        String path = adbpath.getText();
                        Process process = Runtime.getRuntime().exec(path + "\\fastboot -i 0x1ebf devices");
                        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                        if ((line = reader.readLine()) != null) {
                            fblog.append("\n" + line);
                            process.destroy();
                        } else {
                            fblog.setText("No device found");
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else if (Byuphoria.isSelected() || Byutopia.isSelected()) {
                    try {
                        clear2();
                        String line;
                        String path = adbpath.getText();
                        Process process = Runtime.getRuntime().exec(path + "\\fastboot -i 0x2A96 devices");
                        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                        if ((line = reader.readLine()) != null) {
                            fblog.append("\n" + line);
                            process.destroy();
                        } else {
                            fblog.setText("No device found");
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else if (Byunique.isSelected()) {
                    try {
                        clear2();
                        String line;
                        String path = adbpath.getText();
                        Process process = Runtime.getRuntime().exec(path + "\\fastboot devices");
                        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                        if ((line = reader.readLine()) != null) {
                            fblog.append("\n" + line);
                            process.destroy();
                        } else {
                            fblog.setText("No device found");
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }.start();
    }

    private void clear2() {
        fblog.setText("");
    }

    private void installApp() throws IOException {
        try {
            DStatus();
            Thread.sleep(100);
            String tmp = Dstatus.getText();
            if ("Connected!".equals(tmp)) {
                final String path = adbpath.getText();
                FileFilter filter = new FileNameExtensionFilter("Apk files", "apk");
                JFileChooser chooser = new JFileChooser();
                chooser.setFileFilter(filter);
                chooser.addChoosableFileFilter(filter);
                int result = chooser.showOpenDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    File choosen = chooser.getSelectedFile();
                    final String pathoffile = choosen.getAbsolutePath();
                    adblog.setText("Installing App " + pathoffile);
                    new Thread() {
                        @Override
                        public void run() {
                            try {
                                Process re = Runtime.getRuntime().exec(path + "\\adb install " + "\"" + pathoffile + "\"");
                                re.waitFor();
                                final ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(Yuware.class
                                        .getResource("done.png")));
                                JOptionPane.showMessageDialog(
                                        null, "Installed App Sucessfully!", "Sucess", JOptionPane.INFORMATION_MESSAGE, icon);
                            } catch (IOException | InterruptedException ex) {
                                Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }.start();
                }
            } else if ("Recovery!".equals(tmp)) {
                JOptionPane.showMessageDialog(null, "Your Device is in recovery mode! \nConnect in Switch on mode to perform this action", "Oops!", JOptionPane.INFORMATION_MESSAGE);
            } else if ("Fastboot!".equalsIgnoreCase(tmp)) {
                JOptionPane.showMessageDialog(null, "Your Device is in Fastboot mode! \nConnect in Switch on mode to perform this action", "Oops!", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(null, "It looks your device is diconnected!\nPlease connect again to perform this action\nMake sure you install drivers properly!", "Oops! Warnings", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (InterruptedException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void installMulApp() throws IOException, InterruptedException {
        String tmp = Dstatus.getText();
        if ("Connected!".equals(tmp)) {
            final String pathA = System.getProperty("user.home") + "\\Desktop";
            File appfolder = new File(pathA + "\\Apks folder");
            appfolder.mkdir();
            JOptionPane.showMessageDialog(null, " Place all your apks under folder named \"Apks Folder\".\n Folder is on your desktop.", "", JOptionPane.INFORMATION_MESSAGE);
            int y = JOptionPane.showConfirmDialog(null, " DID YOU PLACED ALL YOUR APKS UNDER \"Apks folder\"??"
                    + " \n It takes time to install all apps please check your phone for apps. Have patience!!! "
                    + "\n Note: Do not place any other stuff in that folder, it may be deleted.", "Warning!", JOptionPane.YES_NO_OPTION);
            if (y == JOptionPane.YES_OPTION) {
                new Thread() {
                    @Override
                    public void run() {
                        try {
                            Process deleteDL = Runtime.getRuntime().exec("cmd /c del log.txt", null, new File(pathA + "\\Apks folder\\"));
                            deleteDL.waitFor();

                            Process copy = Runtime.getRuntime().exec("xcopy \"C:\\Program Files\\Yuware™\\Apks folder\\*\" \"" + pathA + "\\Apks folder\" /s /i");
                            copy.waitFor();

                            Process install = Runtime.getRuntime().exec("cmd /c start APK-Installer.bat", null, new File(pathA + "\\Apks folder"));
                            install.waitFor();

                            final ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(Yuware.class
                                    .getResource("done.png")));
                            JOptionPane.showMessageDialog(
                                    null, " All apks were started installing...\n Check Log file placed in Apks folder for more info!", "Sucess!", JOptionPane.INFORMATION_MESSAGE, icon);
                        } catch (IOException | InterruptedException ex) {
                            Logger.getLogger(Yuware.class
                                    .getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }.start();
            }
        } else if ("Recovery!".equals(tmp)) {
            JOptionPane.showMessageDialog(null, "Your Device is in recovery mode! \nConnect in Switch on mode to perform this action", "Oops!", JOptionPane.INFORMATION_MESSAGE);
        } else if ("Fastboot!".equalsIgnoreCase(tmp)) {
            JOptionPane.showMessageDialog(null, "Your Device is in Fastboot mode! \nConnect in Switch on mode to perform this action", "Oops!", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "It looks your device is diconnected!\nPlease connect again to perform this action\nMake sure you install drivers properly!", "Oops! Warnings", JOptionPane.INFORMATION_MESSAGE);
        }
    }

    private void unlockBL() throws IOException, InterruptedException {
        new Thread() {
            @Override
            public void run() {
                try {
                    DStatus();
                    Thread.sleep(300);
                    if (Bforced.isSelected()) {
                        Dstatus.setText("Fastboot!");
                        Dstatus.setForeground(Color.LIGHT_GRAY);
                        Dstatus.setBackground(Color.BLACK);
                    }
                    String tmp = Dstatus.getText();
                    if ("Fastboot!".equals(tmp)) {
                        int y = JOptionPane.showConfirmDialog(null, " **** READ CAREFULLY ****\n Unlocking bootloader will wipe all DATA."
                                + " Including internal storage !!!\n"
                                + " I am not responsible for any damage caused to your device.\n"
                                + " Do you wish to continue.", "Warning!", JOptionPane.YES_NO_OPTION);
                        if (y == JOptionPane.YES_OPTION) {
                            if (Byureka.isSelected() || Byurekap.isSelected()) {
                                try {
                                    clear2();
                                    String line;
                                    String path = adbpath.getText();
                                    JOptionPane.showMessageDialog(null, " Please press \"VOLUME BUTTON\" of your device to confirm after clicking \"OK\"", "Waiting for confirmation!", JOptionPane.INFORMATION_MESSAGE);
                                    Process process = Runtime.getRuntime().exec(path + "\\fastboot -i 0x1ebf oem unlock");
                                    process.waitFor();
                                    final ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(Yuware.class
                                            .getResource("done.png")));
                                    JOptionPane.showMessageDialog(
                                            null, "Device Unlocked Sucessfully!", "Sucess", JOptionPane.INFORMATION_MESSAGE, icon);
                                    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                                    if ((line = reader.readLine()) != null) {
                                        fblog.append("\n" + line);
                                        process.destroy();
                                    } else {
                                        fblog.setText("Done!");
                                    }
                                } catch (IOException | InterruptedException ex) {
                                    Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            } else if (Byuphoria.isSelected() || Byutopia.isSelected()) {
                                try {
                                    clear2();
                                    String line;
                                    String path = adbpath.getText();
                                    JOptionPane.showMessageDialog(null, " Please press \"VOLUME BUTTON\" of your device to confirm after clicking \"OK\"", "Waiting for confirmation!", JOptionPane.INFORMATION_MESSAGE);
                                    Process process = Runtime.getRuntime().exec(path + "\\fastboot -i 0x2A96 oem unlock");
                                    process.waitFor();
                                    final ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(Yuware.class
                                            .getResource("done.png")));
                                    JOptionPane.showMessageDialog(
                                            null, "Device Unlocked Sucessfully!", "Sucess", JOptionPane.INFORMATION_MESSAGE, icon);
                                    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                                    if ((line = reader.readLine()) != null) {
                                        fblog.append("\n" + line);
                                        process.destroy();
                                    } else {
                                        fblog.setText("Done!");
                                    }
                                } catch (IOException | InterruptedException ex) {
                                    Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            } else if (Byunique.isSelected()) {
                                try {
                                    clear2();
                                    String line;
                                    String path = adbpath.getText();
                                    JOptionPane.showMessageDialog(null, " Please press \"VOLUME BUTTON\" of your device to confirm after clicking \"OK\"", "Waiting for confirmation!", JOptionPane.INFORMATION_MESSAGE);
                                    Process process = Runtime.getRuntime().exec(path + "\\fastboot oem unlock-go");
                                    process.waitFor();
                                    final ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(Yuware.class
                                            .getResource("done.png")));
                                    JOptionPane.showMessageDialog(
                                            null, "Device Unlocked Sucessfully!", "Sucess", JOptionPane.INFORMATION_MESSAGE, icon);
                                    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                                    if ((line = reader.readLine()) != null) {
                                        fblog.append("\n" + line);
                                        process.destroy();
                                    } else {
                                        fblog.setText("Done!");
                                    }
                                } catch (IOException | InterruptedException ex) {
                                    Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Connect your device in fastboot first", "Oops! Warnings", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (IOException | InterruptedException ex) {
                }
            }
        }.start();
    }

    private void lockBL() throws IOException {
        try {
            DStatus();
            if (Bforced.isSelected()) {
                Dstatus.setText("Fastboot!");
                Dstatus.setForeground(Color.LIGHT_GRAY);
                Dstatus.setBackground(Color.BLACK);
            }
            Thread.sleep(300);
            String tmp = Dstatus.getText();
            if ("Fastboot!".equals(tmp)) {
                int y = JOptionPane.showConfirmDialog(null, " **** READ CAREFULLY ****\n Locking bootloader will Lock bootloader."
                        + " Next time when you unlock bootloader then it wipe all data\n"
                        + " I am not responsible for any damage caused to your device.\n"
                        + " Do you wish to continue.", "Warning!", JOptionPane.YES_NO_OPTION);
                if (y == JOptionPane.YES_OPTION) {
                    if (Byureka.isSelected() || Byurekap.isSelected()) {
                        clear2();
                        final String path = adbpath.getText();
                        JOptionPane.showMessageDialog(null, " Please press \"VOLUME BUTTON\" of your device to confirm after clicking \"OK\"", "Waiting for confirmation!", JOptionPane.INFORMATION_MESSAGE);
                        new Thread() {
                            @Override
                            public void run() {
                                try {
                                    Process process = Runtime.getRuntime().exec(path + "\\fastboot -i 0x1ebf oem lock");
                                    final ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(Yuware.class
                                            .getResource("done.png")));
                                    JOptionPane.showMessageDialog(
                                            null, "Device locked Sucessfully!", "Sucess", JOptionPane.INFORMATION_MESSAGE, icon);
                                    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                                    String line;
                                    if ((line = reader.readLine()) != null) {
                                        fblog.append("\n" + line);
                                        process.destroy();
                                    } else {
                                        fblog.setText("Done!");
                                    }
                                } catch (IOException ex) {
                                    Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }.start();
                    } else if (Byuphoria.isSelected() || Byutopia.isSelected()) {
                        clear2();
                        final String path = adbpath.getText();
                        JOptionPane.showMessageDialog(null, " Please press \"VOLUME BUTTON\" of your device to confirm after clicking \"OK\"", "Waiting for confirmation!", JOptionPane.INFORMATION_MESSAGE);
                        new Thread() {
                            @Override
                            public void run() {
                                try {
                                    Process process = Runtime.getRuntime().exec(path + "\\fastboot -i 0x2A96 oem lock");
                                    final ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(Yuware.class
                                            .getResource("done.png")));
                                    JOptionPane.showMessageDialog(
                                            null, "Device locked Sucessfully!", "Sucess", JOptionPane.INFORMATION_MESSAGE, icon);
                                    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                                    String line;
                                    if ((line = reader.readLine()) != null) {
                                        fblog.append("\n" + line);
                                        process.destroy();
                                    } else {
                                        fblog.setText("Done!");
                                    }
                                } catch (IOException ex) {
                                    Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }.start();
                    } else if (Byunique.isSelected()) {
                        clear2();
                        final String path = adbpath.getText();
                        JOptionPane.showMessageDialog(null, " Please press \"VOLUME BUTTON\" of your device to confirm after clicking \"OK\"", "Waiting for confirmation!", JOptionPane.INFORMATION_MESSAGE);
                        new Thread() {
                            @Override
                            public void run() {
                                try {
                                    Process process = Runtime.getRuntime().exec(path + "\\fastboot oem lock");
                                    final ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(Yuware.class
                                            .getResource("done.png")));
                                    JOptionPane.showMessageDialog(
                                            null, "Device locked Sucessfully!", "Sucess", JOptionPane.INFORMATION_MESSAGE, icon);
                                    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                                    String line;
                                    if ((line = reader.readLine()) != null) {
                                        fblog.append("\n" + line);
                                        process.destroy();
                                    } else {
                                        fblog.setText("Done!");
                                    }
                                } catch (IOException ex) {
                                    Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            }
                        }.start();
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Connect your device in fastboot first", "Oops! Warnings", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (IOException | InterruptedException ex) {
        }
    }

    private void flashrcvry() throws IOException, InterruptedException {
        int y = JOptionPane.showConfirmDialog(null, " **** READ CAREFULLY ****\n Flashing recovery will replace current recovery permanently"
                + " \n"
                + " I am not responsible for any damage caused to your device.\n"
                + " Do you wish to continue.", "Warning!", JOptionPane.YES_NO_OPTION);
        if (y == JOptionPane.YES_OPTION) {
            if (Byureka.isSelected() || Byurekap.isSelected()) {
                clear2();
                final String path = adbpath.getText();
                FileFilter filter = new FileNameExtensionFilter("img files", "img");
                JFileChooser chooser = new JFileChooser();
                chooser.setFileFilter(filter);
                chooser.addChoosableFileFilter(filter);
                int result = chooser.showOpenDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    final File choosen = chooser.getSelectedFile();
                    new Thread() {
                        @Override
                        public void run() {
                            try {
                                Process process = Runtime.getRuntime().exec(path + "\\fastboot -i 0x1ebf flash recovery \"" + choosen.getAbsolutePath() + "\"");
                                process.waitFor();
                                final ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(Yuware.class
                                        .getResource("done.png")));
                                JOptionPane.showMessageDialog(
                                        null, "Recovery flashed Sucessfully!", "Sucess", JOptionPane.INFORMATION_MESSAGE, icon);
                                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                                String line;
                                if ((line = reader.readLine()) != null) {
                                    fblog.append("\n" + line);
                                    process.destroy();
                                } else {
                                    fblog.setText("Done!");
                                }
                            } catch (IOException | InterruptedException ex) {
                                Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }.start();
                }
            } else if (Byuphoria.isSelected() || Byutopia.isSelected()) {
                clear2();
                final String path = adbpath.getText();
                FileFilter filter = new FileNameExtensionFilter("img files", "img");
                JFileChooser chooser = new JFileChooser();
                chooser.setFileFilter(filter);
                chooser.addChoosableFileFilter(filter);
                int result = chooser.showOpenDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    final File choosen = chooser.getSelectedFile();
                    new Thread() {
                        @Override
                        public void run() {
                            try {
                                Process process = Runtime.getRuntime().exec(path + "\\fastboot -i 0x2A96 flash recovery \"" + choosen.getAbsolutePath() + "\"");
                                process.waitFor();
                                final ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(Yuware.class
                                        .getResource("done.png")));
                                JOptionPane.showMessageDialog(
                                        null, "Recovery flashed Sucessfully!", "Sucess", JOptionPane.INFORMATION_MESSAGE, icon);
                                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                                String line;
                                if ((line = reader.readLine()) != null) {
                                    fblog.append("\n" + line);
                                    process.destroy();
                                } else {
                                    fblog.setText("Done!");
                                }
                            } catch (IOException | InterruptedException ex) {
                                Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }.start();
                }
            } else if (Byunique.isSelected()) {
                clear2();
                final String path = adbpath.getText();
                FileFilter filter = new FileNameExtensionFilter("img files", "img");
                JFileChooser chooser = new JFileChooser();
                chooser.setFileFilter(filter);
                chooser.addChoosableFileFilter(filter);
                int result = chooser.showOpenDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    final File choosen = chooser.getSelectedFile();
                    new Thread() {
                        @Override
                        public void run() {
                            try {
                                Process process = Runtime.getRuntime().exec(path + "\\fastboot flash recovery \"" + choosen.getAbsolutePath() + "\"");
                                process.waitFor();
                                final ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(Yuware.class
                                        .getResource("done.png")));
                                JOptionPane.showMessageDialog(
                                        null, "Recovery flashed Sucessfully!", "Sucess", JOptionPane.INFORMATION_MESSAGE, icon);
                                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                                String line;
                                if ((line = reader.readLine()) != null) {
                                    fblog.append("\n" + line);
                                    process.destroy();
                                } else {
                                    fblog.setText("Done!");
                                }
                            } catch (IOException | InterruptedException ex) {
                                Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }.start();
                }
            }
        }
    }

    private void bootrcvry() throws IOException {
        int y = JOptionPane.showConfirmDialog(null, " **** READ CAREFULLY ****\n Booting recovery will replace current recovery temporarily"
                + " \n"
                + " Do you wish to continue.", "Warning!", JOptionPane.YES_NO_OPTION);
        if (y == JOptionPane.YES_OPTION) {
            if (Byureka.isSelected() || Byurekap.isSelected()) {
                clear2();
                final String path = adbpath.getText();
                FileFilter filter = new FileNameExtensionFilter("img files", "img");
                JFileChooser chooser = new JFileChooser();
                chooser.setFileFilter(filter);
                chooser.addChoosableFileFilter(filter);
                int result = chooser.showOpenDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    final File choosen = chooser.getSelectedFile();
                    new Thread() {
                        @Override
                        public void run() {
                            try {
                                Process process = Runtime.getRuntime().exec(path + "\\fastboot -i 0x1ebf boot \"" + choosen.getAbsolutePath() + "\"");
                                final ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(Yuware.class
                                        .getResource("done.png")));
                                JOptionPane.showMessageDialog(
                                        null, "Recovery booted Sucessfully!\n Please wait 10secs until recovery appears on your phone", "Sucess", JOptionPane.INFORMATION_MESSAGE, icon);
                                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                                String line;
                                if ((line = reader.readLine()) != null) {
                                    fblog.append("\n" + line);
                                    process.destroy();
                                } else {
                                    fblog.setText("Done!");
                                }
                            } catch (IOException ex) {
                                Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }.start();
                }
            } else if (Byuphoria.isSelected() || Byutopia.isSelected()) {
                clear2();
                final String path = adbpath.getText();
                FileFilter filter = new FileNameExtensionFilter("img files", "img");
                JFileChooser chooser = new JFileChooser();
                chooser.setFileFilter(filter);
                chooser.addChoosableFileFilter(filter);
                int result = chooser.showOpenDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    final File choosen = chooser.getSelectedFile();
                    new Thread() {
                        @Override
                        public void run() {
                            try {
                                Process process = Runtime.getRuntime().exec(path + "\\fastboot -i 0x2A96 boot \"" + choosen.getAbsolutePath() + "\"");
                                final ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(Yuware.class
                                        .getResource("done.png")));
                                JOptionPane.showMessageDialog(
                                        null, "Recovery booted Sucessfully!\n Please wait 10secs until recovery appears on your phone", "Sucess", JOptionPane.INFORMATION_MESSAGE, icon);
                                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                                String line;
                                if ((line = reader.readLine()) != null) {
                                    fblog.append("\n" + line);
                                    process.destroy();
                                } else {
                                    fblog.setText("Done!");
                                }
                            } catch (IOException ex) {
                                Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }.start();
                }
            } else if (Byunique.isSelected()) {
                clear2();
                final String path = adbpath.getText();
                FileFilter filter = new FileNameExtensionFilter("img files", "img");
                JFileChooser chooser = new JFileChooser();
                chooser.setFileFilter(filter);
                chooser.addChoosableFileFilter(filter);
                int result = chooser.showOpenDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    final File choosen = chooser.getSelectedFile();
                    new Thread() {
                        @Override
                        public void run() {
                            try {
                                Process process = Runtime.getRuntime().exec(path + "\\fastboot boot \"" + choosen.getAbsolutePath() + "\"");
                                final ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(Yuware.class
                                        .getResource("done.png")));
                                JOptionPane.showMessageDialog(
                                        null, "Recovery booted Sucessfully!\n Please wait 10secs until recovery appears on your phone", "Sucess", JOptionPane.INFORMATION_MESSAGE, icon);
                                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                                String line;
                                if ((line = reader.readLine()) != null) {
                                    fblog.append("\n" + line);
                                    process.destroy();
                                } else {
                                    fblog.setText("Done!");
                                }
                            } catch (IOException ex) {
                                Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }.start();
                }
            }
        }
    }

    private void deviceInfo() throws IOException, InterruptedException {
        new Thread() {
            @Override
            public void run() {
                int y = JOptionPane.showConfirmDialog(null, " **** READ CAREFULLY ****\n Make sure your is booted in fastboot mode!"
                        + " \n"
                        + " Do you wish to continue.", "Warning!", JOptionPane.YES_NO_OPTION);
                if (y == JOptionPane.YES_OPTION) {
                    if (Byureka.isSelected() || Byurekap.isSelected()) {
                        try {
                            clear2();
                            String line;
                            String path = adbpath.getText();
                            Process process = Runtime.getRuntime().exec("cmd /c yurekainfo.bat", null, new File("C:/Program Files/Yuware™"));
                            process.waitFor();
                            Desktop.getDesktop().edit(new File("C:/Program Files/Yuware™/Yureka(+)_DeviceInfo.txt"));
                            process.destroy();
                        } catch (IOException | InterruptedException ex) {
                            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                } else if (Byuphoria.isSelected() || Byutopia.isSelected()) {
                    try {
                        clear2();
                        String line;
                        String path = adbpath.getText();
                        Process process = Runtime.getRuntime().exec("cmd /c yuphoriainfo.bat", null, new File("C:/Program Files/Yuware™"));
                        process.waitFor();
                        Desktop.getDesktop().edit(new File("C:/Program Files/Yuware™/Yuphoria_DeviceInfo.txt"));
                        process.destroy();
                    } catch (IOException | InterruptedException ex) {
                        Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else if (Byunique.isSelected()) {
                    try {
                        clear2();
                        String line;
                        String path = adbpath.getText();
                        Process process = Runtime.getRuntime().exec("cmd /c yuniqueinfo.bat", null, new File("C:/Program Files/Yuware™"));
                        process.waitFor();
                        Desktop.getDesktop().edit(new File("C:/Program Files/Yuware™/Yunique_DeviceInfo.txt"));
                        process.destroy();
                    } catch (IOException | InterruptedException ex) {
                        Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }.start();
    }

    private void rebootFbSys() throws IOException {
        new Thread() {
            @Override
            public void run() {
                if (Byureka.isSelected() || Byurekap.isSelected()) {
                    try {
                        clear2();
                        String line;
                        String path = adbpath.getText();
                        Process process = Runtime.getRuntime().exec(path + "\\fastboot -i 0x1ebf reboot");
                        final ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(Yuware.class
                                .getResource("done.png")));
                        JOptionPane.showMessageDialog(
                                null, "Device rebooted Sucessfully!", "Sucess", JOptionPane.INFORMATION_MESSAGE, icon);
                        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                        if ((line = reader.readLine()) != null) {
                            fblog.append("\n" + line);
                            process.destroy();
                        } else {
                            fblog.setText("Done!");
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else if (Byuphoria.isSelected() || Byutopia.isSelected()) {
                    try {
                        clear2();
                        String line;
                        String path = adbpath.getText();
                        Process process = Runtime.getRuntime().exec(path + "\\fastboot -i 0x2A96 reboot");
                        final ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(Yuware.class
                                .getResource("done.png")));
                        JOptionPane.showMessageDialog(
                                null, "Device rebooted Sucessfully!", "Sucess", JOptionPane.INFORMATION_MESSAGE, icon);
                        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                        if ((line = reader.readLine()) != null) {
                            fblog.append("\n" + line);
                            process.destroy();
                        } else {
                            fblog.setText("Done!");
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else if (Byunique.isSelected()) {
                    try {
                        clear2();
                        String line;
                        String path = adbpath.getText();
                        Process process = Runtime.getRuntime().exec(path + "\\fastboot reboot");
                        final ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(Yuware.class
                                .getResource("done.png")));
                        JOptionPane.showMessageDialog(
                                null, "Device rebooted Sucessfully!", "Sucess", JOptionPane.INFORMATION_MESSAGE, icon);
                        BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                        if ((line = reader.readLine()) != null) {
                            fblog.append("\n" + line);
                            process.destroy();
                        } else {
                            fblog.setText("Done!");
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }.start();
    }

    private void drivers() {
        try {
            String msg1 = "Yes!";
            String msg2 = "No, start PDA Setup";
            Object[] msg = {msg1, msg2};
            int y = JOptionPane.showOptionDialog(null, " Do want to Download The drivers from official site ?", "Confirmation!", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, msg, msg[0]);
            if (y == JOptionPane.NO_OPTION) {
                JOptionPane.showMessageDialog(null, " Follow all instructions for Installing drivers by PDA Net software.", "Warning!", JOptionPane.INFORMATION_MESSAGE);
                Runtime.getRuntime().exec("C:/Program Files/Yuware™/Pda");
            } else if (y == JOptionPane.YES_OPTION) {
                if (Byureka.isSelected() || Byurekap.isSelected()) {
                    JOptionPane.showMessageDialog(null, " Sorry! But Official drivers are not available for Yureka or Yureka plus"
                            + "\n How ever the official team is working on it..."
                            + "\n Continue your drivers installation with PDA net!");
                } else if (Byuphoria.isSelected()) {
                    Desktop.getDesktop().browse(new URI("http://www.yuplaygod.com/files/YUPHORIA/YUPHORIA_drivers-v1.0.zip"));
                } else if (Byutopia.isSelected()) {
                    Desktop.getDesktop().browse(new URI("http://www.yuplaygod.com/files/YUTOPIA/YUTOPIA_adb_and_fastboot_packages.7z"));
                } else if (Byunique.isSelected()) {
                    int x = JOptionPane.showConfirmDialog(null, " Yunique drivers are installed by System itself or by PDA"
                            + "\n But if you want to install manually then follow the official"
                            + "\n Should i open Guide for you ?", "Information", JOptionPane.YES_NO_OPTION);
                    if (x == JOptionPane.YES_OPTION) {
                        Desktop.getDesktop().browse(new URI("http://forums.yuplaygod.com/threads/official-how-to-yunique-drivers-installation.23266/"));
                    }
                }
            }
        } catch (IOException | URISyntaxException ex) {
            Logger.getLogger(Yuware.class
                    .getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void flashAll() {
        int y = JOptionPane.showConfirmDialog(null, " **** READ CAREFULLY ****\n Flashing partitions will replace ALL current partitions.\n"
                + "\n !! Select system.img partition from list of all your partitions !! \n"
                + "\n I am not responsible for any damage caused to your device.\n"
                + " Do you wish to continue.", "Warning!", JOptionPane.YES_NO_OPTION);
        if (y == JOptionPane.YES_OPTION) {
            if (Byureka.isSelected() || Byurekap.isSelected()) {
                clear2();
                final String path = adbpath.getText();
                FileFilter filter = new FileNameExtensionFilter("img files", "img");
                JFileChooser chooser = new JFileChooser();
                chooser.setDialogTitle("Select system.img");
                chooser.setFileFilter(filter);
                chooser.addChoosableFileFilter(filter);
                chooser.setCurrentDirectory(new File(System.getProperty("user.home") + "\\Desktop"));
                int result = chooser.showOpenDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    final File choosen = chooser.getSelectedFile();
                    new Thread() {
                        @Override
                        public void run() {
                            try {
                                Process process = Runtime.getRuntime().exec("xcopy \"C:\\Program Files\\Yuware™\\fastboot.exe\" " + "\"" + choosen.getParent() + "\"");
                                process.waitFor();
                                Process flashall = Runtime.getRuntime().exec("xcopy \"C:\\Program Files\\Yuware™\\yurekaflasher.bat\" " + "\"" + choosen.getParent() + "\"");
                                flashall.waitFor();
                                Process flashing = Runtime.getRuntime().exec("cmd /c start \"Flashing all Partitions on Yureka/Yureka+\" yurekaflasher.bat", null, new File(choosen.getParent()));
                                process.waitFor();
                            } catch (IOException | InterruptedException ex) {
                                Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }.start();
                }
            } else if (Byuphoria.isSelected() || Byutopia.isSelected()) {
                clear2();
                final String path = adbpath.getText();
                FileFilter filter = new FileNameExtensionFilter("img files", "img");
                JFileChooser chooser = new JFileChooser();
                chooser.setDialogTitle("Select system.img");
                chooser.setFileFilter(filter);
                chooser.addChoosableFileFilter(filter);
                chooser.setCurrentDirectory(new File(System.getProperty("user.home") + "\\Desktop"));
                int result = chooser.showOpenDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    final File choosen = chooser.getSelectedFile();
                    new Thread() {
                        @Override
                        public void run() {
                            try {
                                Process process = Runtime.getRuntime().exec("xcopy \"C:\\Program Files\\Yuware™\\fastboot.exe\" " + "\"" + choosen.getParent() + "\"");
                                process.waitFor();
                                Process flashall = Runtime.getRuntime().exec("xcopy \"C:\\Program Files\\Yuware™\\yuphoriaflasher.bat\" " + "\"" + choosen.getParent() + "\"");
                                flashall.waitFor();
                                Process flashing = Runtime.getRuntime().exec("cmd /c start \"Flashing all Partitions on Yuphoria\" yuphoriaflasher.bat", null, new File(choosen.getParent()));
                                process.waitFor();
                            } catch (IOException | InterruptedException ex) {
                                Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }.start();
                }
            } else if (Byunique.isSelected()) {
                clear2();
                final String path = adbpath.getText();
                FileFilter filter = new FileNameExtensionFilter("img files", "img");
                JFileChooser chooser = new JFileChooser();
                chooser.setDialogTitle("Select system.img");
                chooser.setFileFilter(filter);
                chooser.addChoosableFileFilter(filter);
                chooser.setCurrentDirectory(new File(System.getProperty("user.home") + "\\Desktop"));
                int result = chooser.showOpenDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    final File choosen = chooser.getSelectedFile();
                    new Thread() {
                        @Override
                        public void run() {
                            try {
                                Process process = Runtime.getRuntime().exec("xcopy \"C:\\Program Files\\Yuware™\\fastboot.exe\" " + "\"" + choosen.getParent() + "\"");
                                process.waitFor();
                                Process flashall = Runtime.getRuntime().exec("xcopy \"C:\\Program Files\\Yuware™\\yuniqueflasher.bat\" " + "\"" + choosen.getParent() + "\"");
                                flashall.waitFor();
                                Process flashing = Runtime.getRuntime().exec("cmd /c start \"Flashing all Partitions on Yunique\" yuniqueflasher.bat", null, new File(choosen.getParent()));
                                process.waitFor();
                            } catch (IOException | InterruptedException ex) {
                                Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }.start();
                }
            }
        }

    }

    private void formatAll() {
        int y = JOptionPane.showConfirmDialog(null, "**** Read Carefully ****\n"
                + " Formatting all partitions will wipe all current partitions on your device!!!\n"
                + " I am not responsible for any damaged caused\n"
                + " Do you wish to continue?", "", JOptionPane.YES_NO_OPTION);
        if (y == JOptionPane.YES_OPTION) {
            if (Byureka.isSelected() | Byurekap.isSelected()) {
                new Thread() {
                    @Override
                    public void run() {
                        try {
                            Process formatting = Runtime.getRuntime().exec("cmd /c start \"Formating all partitions\" ytformatall.bat", null, new File("C:/Program Files/Yuware™"));
                            formatting.waitFor();
                        } catch (IOException | InterruptedException ex) {
                            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }.start();
            } else if (Byuphoria.isSelected() || Byutopia.isSelected()) {
                new Thread() {
                    @Override
                    public void run() {
                        try {
                            Process formatting = Runtime.getRuntime().exec("cmd /c start \"Formating all partitions\" ylformatall.bat", null, new File("C:/Program Files/Yuware™"));
                            formatting.waitFor();
                        } catch (IOException | InterruptedException ex) {
                            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }.start();
            } else if (Byunique.isSelected()) {
                new Thread() {
                    @Override
                    public void run() {
                        try {
                            Process formatting = Runtime.getRuntime().exec("cmd /c start \"Formating all partitions\" yjformatall.bat", null, new File("C:/Program Files/Yuware™"));
                            formatting.waitFor();
                        } catch (IOException | InterruptedException ex) {
                            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }.start();
            }
        }
    }

    private void push() {
        final String path = adbpath.getText();
        JFileChooser chooser = new JFileChooser();
        int result = chooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            File choosen = chooser.getSelectedFile();
            final String pathoffile = choosen.getAbsolutePath();
            adblog.setText("Pushing file " + pathoffile);
            new Thread() {
                @Override
                public void run() {
                    try {
                        String line;
                        Process re = Runtime.getRuntime().exec(path + "\\adb push " + "\"" + pathoffile + "\"" + " /sdcard/");
                        re.waitFor();
                        final ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(Yuware.class
                                .getResource("done.png")));
                        JOptionPane.showMessageDialog(
                                null, "Pushed file Sucessfully!\n It is saved in your internal storage", "Sucess", JOptionPane.INFORMATION_MESSAGE, icon);
                    } catch (IOException | InterruptedException ex) {
                        Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }.start();
        }
    }

    private void DStatus() throws IOException {
        new Thread() {

            @Override
            public void run() {
                try {
                    fblog.setVisible(false);
                    fastboot();
                    Thread.sleep(250);
                    String line2 = fblog.getText();
                    String line;
                    String path = adbpath.getText();
                    Process process = Runtime.getRuntime().exec(path + "\\adb devices");
                    BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
                    process.waitFor();
                    try {
                        if (Bforced.isSelected() == false) {
                            while ((line = reader.readLine()) != null) {
                                if (line.endsWith("device") || line2.endsWith("fastboot")) {
                                    if (line2.endsWith("fastboot")) {
                                        Dstatus.setText("Fastboot!");
                                        Dstatus.setForeground(Color.GREEN);
                                        Dstatus.setBackground(Color.BLUE);
                                    } else {
                                        Dstatus.setText("Connected!");
                                        Dstatus.setForeground(Color.GREEN);
                                        Dstatus.setBackground(Color.BLUE);
                                    }
                                } else if (line.endsWith("attached ")) {
                                    Dstatus.setText("Not found!");
                                    Dstatus.setForeground(Color.red);
                                    Dstatus.setBackground(Color.lightGray);
                                } else if (line.endsWith("recovery")) {
                                    Dstatus.setText("Recovery!");
                                    Dstatus.setForeground(Color.CYAN);
                                    Dstatus.setBackground(Color.BLACK);
                                } else if (line.endsWith("unauthorized")) {
                                    Dstatus.setText("Unauthorized!");
                                    Dstatus.setForeground(Color.yellow);
                                    Dstatus.setBackground(Color.BLACK);
                                }
                                process.destroy();
                            }
                        } else {
                            Dstatus.setText("Connected!");
                            Dstatus.setForeground(Color.LIGHT_GRAY);
                            Dstatus.setBackground(Color.BLACK);
                        }

                        process.destroy();
                    } catch (IOException ex) {
                        Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    fblog.setText("");
                    fblog.setVisible(true);
                } catch (IOException | InterruptedException ex) {
                    Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }.start();
    }

    private void backup() {
        new Thread() {
            @Override
            public void run() {
                try {
                    DStatus();
                    Thread.sleep(300);
                    String tmp = Dstatus.getText();
                    if (null != tmp) {
                        switch (tmp) {
                            case "Connected!":
                                JOptionPane.showMessageDialog(null, "Your backup will be stored in a folder name BACKUP on your desktop", "Message!", JOptionPane.INFORMATION_MESSAGE);
                                String path = adbpath.getText();
                                final String pathA = System.getProperty("user.home") + "\\Desktop";
                                File f = new File(pathA + "\\Backup\\");
                                f.mkdir();
                                Process backup = Runtime.getRuntime().exec("cmd /c backup.bat", null, new File("C:/Program Files/Yuware™"));
                                backup.waitFor();
                                break;
                            case "Fastboot!":
                                JOptionPane.showMessageDialog(null, "This Option will work if your device is connected on Switch ON mode\nFor rebooting from fastboot mode click on\"Reboot to System\" in Fastboot option", "", JOptionPane.INFORMATION_MESSAGE);
                                break;
                            default:
                                JOptionPane.showMessageDialog(null, "It looks your device is diconnected!\nPlease connect again to perform this action\nMake sure you install drivers properly!", "Oops! Warnings", JOptionPane.INFORMATION_MESSAGE);
                                break;
                        }
                    }
                } catch (IOException | InterruptedException ex) {
                    Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }.start();
    }

    private void restore() {

        try {
            DStatus();
            Thread.sleep(300);
            String tmp = Dstatus.getText();
            if (null != tmp) {
                switch (tmp) {
                    case "Connected!":
                        JOptionPane.showMessageDialog(null, "Select the .ab file which is a ADB backup file", "Message!", JOptionPane.INFORMATION_MESSAGE);
                        final String path = adbpath.getText();
                        FileFilter filter = new FileNameExtensionFilter("ab files", "ab");
                        JFileChooser chooser = new JFileChooser();
                        chooser.setFileFilter(filter);
                        chooser.addChoosableFileFilter(filter);
                        int result = chooser.showOpenDialog(this);
                        if (result == JFileChooser.APPROVE_OPTION) {
                            final File choosen = chooser.getSelectedFile();
                            new Thread() {
                                @Override
                                public void run() {
                                    Process restore;
                                    try {
                                        JOptionPane.showMessageDialog(null, " Open phone and continue the restoring process instructions!", "Message", JOptionPane.INFORMATION_MESSAGE);
                                        clear();
                                        adblog.setText("Restoring Backup...");
                                        restore = Runtime.getRuntime().exec(path + "adb restore " + choosen.getAbsolutePath());
                                        restore.waitFor();
                                        final ImageIcon icon = new ImageIcon(Toolkit.getDefaultToolkit().getImage(Yuware.class.getResource("done.png")));
                                        JOptionPane.showMessageDialog(null, "Backup restored sucessfully!", "Sucess", JOptionPane.INFORMATION_MESSAGE, icon);
                                    } catch (IOException | InterruptedException ex) {
                                        Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                            }.start();
                        }
                        break;
                    case "Fastboot!":
                        JOptionPane.showMessageDialog(null, "This Option will work if your device is connected on Switch ON mode\nFor rebooting from fastboot mode click on\"Reboot to System\" in Fastboot option", "", JOptionPane.INFORMATION_MESSAGE);
                        break;
                    default:
                        JOptionPane.showMessageDialog(null, "It looks your device is diconnected!\nPlease connect again to perform this action\nMake sure you install drivers properly!", "Oops! Warnings", JOptionPane.INFORMATION_MESSAGE);
                        break;
                }
            }
        } catch (IOException | InterruptedException ex) {
            Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void checkUpdate() {
        new Thread() {
            @Override
            public void run() {
                Socket sock = new Socket();
                InetSocketAddress addr = new InetSocketAddress("www.google.com", 80);
                JCheckBox cb = new JCheckBox("Do not check update on startup!");
                try {
                    sock.connect(addr);
                    jLabel14.setVisible(true);
                    jLabel14.setText("Checking for Update Available...");
                    File v = new File("C:\\Program Files\\Yuware™\\version.txt");
                    v.getAbsoluteFile().delete();
                    Thread.sleep(200);
                    URL website = new URL("https://raw.githubusercontent.com/SomeshThakur/Yuware/master/src/yuware/version.txt");
                    ReadableByteChannel rbc = Channels.newChannel(website.openStream());
                    FileOutputStream fos = new FileOutputStream("C:\\Program Files\\Yuware™\\version.txt");
                    fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);
                    BufferedReader br = new BufferedReader(new FileReader(("C:\\Program Files\\Yuware™\\version.txt")));
                    String ver = br.readLine();
                    double Lv = Double.parseDouble(ver);
                    double Cv = 5.0;
                    jLabel14.setVisible(false);
                    BufferedReader brr = null;
                    try {
                        brr = new BufferedReader(new FileReader(("C:\\Program Files\\Yuware™\\dncu.txt")));
                    } catch (FileNotFoundException ex) {
                    }
                    try {
                        if ("0".equals(brr.readLine())) {
                            if (Lv > Cv) {
                                String msg1 = "Download now";
                                String msg2 = "I will do it later";
                                Object[] msg = {msg1, msg2};
                                String ms = " Download now\n Available version: " + Lv + "\n Current Version: " + Cv;
                                Object[] msc = {ms, cb};
                                int y = JOptionPane.showOptionDialog(null, msc, "Update Avaible", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, msg, msg[0]);
                                if (y == JOptionPane.YES_OPTION) {
                                    Desktop.getDesktop().browse(new URI("http://forums.yuplaygod.com/threads/windows-yuware%E2%84%A2-gui.21967"));
                                }
                            } else {
                                String ms1 = " No Update available!\n Your Yuware is Latest";
                                Object[] msc1 = {ms1, cb};
                                JOptionPane.showMessageDialog(null, msc1, "Up-To-Date", JOptionPane.INFORMATION_MESSAGE);
                            }
                            if (cb.isSelected()) {
                                Process exec = Runtime.getRuntime().exec("cmd /c dncuY.bat", null, new File("C:/Program Files/Yuware™"));
                            }
                        } else if (Lv > Cv) {
                            String msg1 = "Download now";
                            String msg2 = "I will do it later";
                            Object[] msg = {msg1, msg2};
                            int y = JOptionPane.showOptionDialog(null, " Download now\n Available version: " + Lv + "\n Current Version: " + Cv, "Update Avaible", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, msg, msg[0]);
                            if (y == JOptionPane.YES_OPTION) {
                                Desktop.getDesktop().browse(new URI("http://forums.yuplaygod.com/threads/windows-yuware%E2%84%A2-gui.21967"));
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, " No Update available!\n Your Yuware is Latest", "Up-To-Date", JOptionPane.INFORMATION_MESSAGE);
                        }
                    } catch (IOException e) {
                    }
                } catch (IOException | InterruptedException | NumberFormatException | HeadlessException | URISyntaxException e) {
                    try {
                        BufferedReader brr = new BufferedReader(new FileReader(("C:\\Program Files\\Yuware™\\dncu.txt")));
                        try {
                            if ("0".equals(brr.readLine())) {
                                String msg = "Error while checking update."
                                        + "Connect to Internet first";
                                Object[] obj = {msg, cb};
                                JOptionPane.showMessageDialog(null, obj, "Error", JOptionPane.ERROR_MESSAGE);
                                if (cb.isSelected()) {
                                    try {
                                        Process exec = Runtime.getRuntime().exec("cmd /c dncuY.bat", null, new File("C:/Program Files/Yuware™"));
                                    } catch (IOException ex) {
                                    }
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Error while checking update."
                                        + "Connect to Internet first", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } catch (IOException | HeadlessException ee) {
                        }
                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(Yuware.class.getName()).log(Level.SEVERE, null, ex);
                    } finally {
                        try {
                            sock.close();
                        } catch (Exception ee) {
                        }
                    }
                }
            }
        }.start();
    }
}
